// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents(in *jlexer.Lexer, out *ProcessContextSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.ProcessContext = new(ProcessContext)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cgroups":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v1 := 0
				for !in.IsDelim(']') {
					if v1 < 15 {
						easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents1(in, &(out.Cgroups)[v1])
						v1++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "namespace_context":
			easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents2(in, &out.NamespaceContext)
		case "credentials":
			easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents3(in, &out.Credentials)
		case "comm":
			out.Comm = string(in.String())
		case "pid":
			out.PID = uint32(in.Uint32())
		case "tid":
			out.TID = uint32(in.Uint32())
		case "ppid":
			out.PPID = uint32(in.Uint32())
		case "ppid_comm":
			out.PPIDComm = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents(out *jwriter.Writer, in ProcessContextSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cgroups\":"
		out.RawString(prefix[1:])
		out.Raw((in.Cgroups).MarshalJSON())
	}
	{
		const prefix string = ",\"namespace_context\":"
		out.RawString(prefix)
		easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents1(out, in.NamespaceContext)
	}
	{
		const prefix string = ",\"credentials\":"
		out.RawString(prefix)
		easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents2(out, in.Credentials)
	}
	{
		const prefix string = ",\"comm\":"
		out.RawString(prefix)
		out.String(string(in.Comm))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PID))
	}
	{
		const prefix string = ",\"tid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TID))
	}
	{
		const prefix string = ",\"ppid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PPID))
	}
	{
		const prefix string = ",\"ppid_comm\":"
		out.RawString(prefix)
		out.String(string(in.PPIDComm))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessContextSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessContextSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents(l, v)
}
func easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents3(in *jlexer.Lexer, out *CredentialsContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = uint32(in.Uint32())
		case "gid":
			out.GID = uint32(in.Uint32())
		case "suid":
			out.SUID = uint32(in.Uint32())
		case "sgid":
			out.SGID = uint32(in.Uint32())
		case "euid":
			out.EUID = uint32(in.Uint32())
		case "egid":
			out.EGID = uint32(in.Uint32())
		case "fsuid":
			out.FSUID = uint32(in.Uint32())
		case "fsgid":
			out.FSGID = uint32(in.Uint32())
		case "secure_bits":
			out.SecureBits = uint32(in.Uint32())
		case "cap_inheritable":
			out.CapInheritable = uint64(in.Uint64())
		case "cap_permitted":
			out.CapPermitted = uint64(in.Uint64())
		case "cap_effective":
			out.CapEffective = uint64(in.Uint64())
		case "cap_bset":
			out.CapBSET = uint64(in.Uint64())
		case "cap_ambiant":
			out.CapAmbiant = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents2(out *jwriter.Writer, in CredentialsContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UID))
	}
	{
		const prefix string = ",\"gid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.GID))
	}
	{
		const prefix string = ",\"suid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SUID))
	}
	{
		const prefix string = ",\"sgid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SGID))
	}
	{
		const prefix string = ",\"euid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.EUID))
	}
	{
		const prefix string = ",\"egid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.EGID))
	}
	{
		const prefix string = ",\"fsuid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FSUID))
	}
	{
		const prefix string = ",\"fsgid\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.FSGID))
	}
	{
		const prefix string = ",\"secure_bits\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.SecureBits))
	}
	{
		const prefix string = ",\"cap_inheritable\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CapInheritable))
	}
	{
		const prefix string = ",\"cap_permitted\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CapPermitted))
	}
	{
		const prefix string = ",\"cap_effective\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CapEffective))
	}
	{
		const prefix string = ",\"cap_bset\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CapBSET))
	}
	{
		const prefix string = ",\"cap_ambiant\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.CapAmbiant))
	}
	out.RawByte('}')
}
func easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents2(in *jlexer.Lexer, out *NamespaceContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cgroup_namespace":
			out.CgroupNamespace = uint32(in.Uint32())
		case "ipc_namespace":
			out.IPCNamespace = uint32(in.Uint32())
		case "net_namespace":
			out.NetNamespace = uint32(in.Uint32())
		case "mnt_namespace":
			out.MntNamespace = uint32(in.Uint32())
		case "pid_namespace":
			out.PIDNamespace = uint32(in.Uint32())
		case "time_namespace":
			out.TimeNamespace = uint32(in.Uint32())
		case "user_namespace":
			out.UserNamespace = uint32(in.Uint32())
		case "uts_namespace":
			out.UTSNamespace = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents1(out *jwriter.Writer, in NamespaceContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cgroup_namespace\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.CgroupNamespace))
	}
	{
		const prefix string = ",\"ipc_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.IPCNamespace))
	}
	{
		const prefix string = ",\"net_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.NetNamespace))
	}
	{
		const prefix string = ",\"mnt_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.MntNamespace))
	}
	{
		const prefix string = ",\"pid_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.PIDNamespace))
	}
	{
		const prefix string = ",\"time_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.TimeNamespace))
	}
	{
		const prefix string = ",\"user_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UserNamespace))
	}
	{
		const prefix string = ",\"uts_namespace\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UTSNamespace))
	}
	out.RawByte('}')
}
func easyjson5c87105dDecodeGithubComGui774umeTcprobePkgTcprobeEvents1(in *jlexer.Lexer, out *CgroupContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5c87105dEncodeGithubComGui774umeTcprobePkgTcprobeEvents3(out *jwriter.Writer, in CgroupContext) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
