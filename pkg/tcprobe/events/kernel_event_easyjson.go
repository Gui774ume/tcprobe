// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package events

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2269c87aDecodeGithubComGui774umeTcprobePkgTcprobeEvents(in *jlexer.Lexer, out *KernelEventSerializer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.KernelEvent = new(KernelEvent)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Time).UnmarshalJSON(data))
			}
		case "retval":
			out.Retval = KernelError(in.Int())
		case "cpu":
			out.CPU = uint32(in.Uint32())
		case "type":
			out.Type = EventType(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2269c87aEncodeGithubComGui774umeTcprobePkgTcprobeEvents(out *jwriter.Writer, in KernelEventSerializer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix[1:])
		out.Raw((in.Time).MarshalJSON())
	}
	{
		const prefix string = ",\"retval\":"
		out.RawString(prefix)
		out.Raw((in.Retval).MarshalJSON())
	}
	{
		const prefix string = ",\"cpu\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CPU))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.Type).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KernelEventSerializer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2269c87aEncodeGithubComGui774umeTcprobePkgTcprobeEvents(w, v)
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KernelEventSerializer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2269c87aDecodeGithubComGui774umeTcprobePkgTcprobeEvents(l, v)
}
